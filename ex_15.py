def flatten(data):
    # Якщо вхідний список порожній, повертаємо порожній список
    if not data:
        return []

    # Якщо перший елемент списку є списком, рекурсивно викликаємо функцію з першим елементом списку
    if isinstance(data[0], list):
        first = flatten(data[0])
        rest = flatten(data[1:])
        return first + rest

    # Якщо перший елемент списку не є списком, отримуємо перший список із першого елемента списку
    first = [data[0]]
    rest = flatten(data[1:])
    return first + rest

# Приклад використання
nested_list = [1, 2, [3, 4, [5, 6]], 7]
flat_list = flatten(nested_list)
print(flat_list)



'''
Рекурсія добре підходить до задачі flatentening.
Це процес вирівнювання списків, який полягає в позбавленні вкладеної структури.
Наприклад список вигляду [1, 2, [3, 4, [5, 6]], 7] має бути перетворений на плоский (flat) список [1, 2, 3, 4, 5, 6, 7]

Напишіть функцію flatten, яка приймає на вхід список, рекурсивно вирівнюватиме цей список і повертатиме пласку версію списку.

Для виконання завдання можна дотримуватися наступного алгоритму:

Якщо вхідний список порожній, то:
  Повертаємо порожній список
Якщо перший елемент списку є списком, то:
  Отримуємо перший список, рекурсивно викликавши функцію з першим елементом списку
  Отримуємо другий список, рекурсивно викликавши функцію з рештою списку без першого елемента
  Повертаємо конкатенацію двох списків
Якщо перший елемент списку не є списком, то:
  Отримуємо перший список із першого елемента списку
  Отримуємо другий список, рекурсивно викликавши функцію з рештою списку без першого елемента
  Повертаємо конкатенацію двох списків
'''